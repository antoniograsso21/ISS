/* Generated by AN DISI Unibo */ 
package it.unibo.handle_planner;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractHandle_planner extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractHandle_planner(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/handle_planner/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/handle_planner/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitForStart",waitForStart);
	    	stateTab.put("moveRobot",moveRobot);
	    	stateTab.put("handleResult",handleResult);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "handle_planner tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"handle_planner STARTED\"";
	    	println( temporaryStr );  
	    	it.unibo.myPlannerIntegrator.myPlanner.init( myself  );
	    	//switchTo waitForStart
	        switchToPlanAsNextState(pr, myselfName, "handle_planner_"+myselfName, 
	              "waitForStart",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitForStart = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitForStart",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitForStart";  
	    	temporaryStr = "\"Waiting for start...\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"handle_planner_"+myselfName,false,
	          new StateFun[]{stateTab.get("moveRobot") }, 
	          new String[]{"true","E","startRobot" },
	          1000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForStart){  
	    	 println( getName() + " plan=waitForStart WARNING:" + e_waitForStart.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForStart
	    
	    StateFun moveRobot = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_moveRobot",0);
	     pr.incNumIter(); 	
	    	String myselfName = "moveRobot";  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(1000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "moveRobot";
	    	if( ! aar.getGoon() ) return ;
	    	it.unibo.myPlannerIntegrator.myPlanner.getMove( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??move(n)" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"noMoreMoves","noMoreMoves", guardVars ).toString();
	    	sendMsg("noMoreMoves",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??move(w)" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"doBasicStep","doBasicStep", guardVars ).toString();
	    	sendMsg("doBasicStep","robot_basic_movements", QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??move(a)" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"doRotation(VALUE)","doRotation(a)", guardVars ).toString();
	    	sendMsg("doRotation","robot_basic_movements", QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??move(d)" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"doRotation(VALUE)","doRotation(d)", guardVars ).toString();
	    	sendMsg("doRotation","robot_basic_movements", QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"handle_planner_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleResult"), stateTab.get("handleResult"), stateTab.get("waitForStart"), stateTab.get("waitForStart") }, 
	          new String[]{"true","E","basicStepResult", "true","E","rotationResult", "true","E","stopRobot", "true","M","noMoreMoves" },
	          1000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_moveRobot){  
	    	 println( getName() + " plan=moveRobot WARNING:" + e_moveRobot.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//moveRobot
	    
	    StateFun handleResult = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleResult",-1);
	    	String myselfName = "handleResult";  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("basicStepResult(bad)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("basicStepResult") && 
	    		pengine.unify(curT, Term.createTerm("basicStepResult(VALUE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			{/* JavaLikeMove */ 
	    			String arg1 = "bad" ;
	    			//end arg1
	    			it.unibo.myPlannerIntegrator.myPlanner.setMoveResult(this,arg1 );
	    			}
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("basicStepResult(good)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("basicStepResult") && 
	    		pengine.unify(curT, Term.createTerm("basicStepResult(VALUE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			{/* JavaLikeMove */ 
	    			String arg1 = "good" ;
	    			//end arg1
	    			it.unibo.myPlannerIntegrator.myPlanner.setMoveResult(this,arg1 );
	    			}
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("rotationResult(good)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("rotationResult") && 
	    		pengine.unify(curT, Term.createTerm("rotationResult(VALUE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			{/* JavaLikeMove */ 
	    			String arg1 = "good" ;
	    			//end arg1
	    			it.unibo.myPlannerIntegrator.myPlanner.setMoveResult(this,arg1 );
	    			}
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"handle_planner_"+myselfName,false,true);
	    }catch(Exception e_handleResult){  
	    	 println( getName() + " plan=handleResult WARNING:" + e_handleResult.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleResult
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
