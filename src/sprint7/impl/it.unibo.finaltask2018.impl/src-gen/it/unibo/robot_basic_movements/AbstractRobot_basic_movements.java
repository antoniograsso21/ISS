/* Generated by AN DISI Unibo */ 
package it.unibo.robot_basic_movements;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractRobot_basic_movements extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractRobot_basic_movements(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/robot_basic_movements/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/robot_basic_movements/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitForMsgs",waitForMsgs);
	    	stateTab.put("handleBasicStep",handleBasicStep);
	    	stateTab.put("goodResultBasicStep",goodResultBasicStep);
	    	stateTab.put("badResultBasicStep",badResultBasicStep);
	    	stateTab.put("handleRotation",handleRotation);
	    	stateTab.put("goodResultRotation",goodResultRotation);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "robot_basic_movements tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"robot_basic_movements STARTED\"";
	    	println( temporaryStr );  
	    	//switchTo waitForMsgs
	        switchToPlanAsNextState(pr, myselfName, "robot_basic_movements_"+myselfName, 
	              "waitForMsgs",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitForMsgs = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitForMsgs",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitForMsgs";  
	    	//bbb
	     msgTransition( pr,myselfName,"robot_basic_movements_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleBasicStep"), stateTab.get("handleRotation") }, 
	          new String[]{"true","M","doBasicStep", "true","M","doRotation" },
	          1000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForMsgs){  
	    	 println( getName() + " plan=waitForMsgs WARNING:" + e_waitForMsgs.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForMsgs
	    
	    StateFun handleBasicStep = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleBasicStep",-1);
	    	String myselfName = "handleBasicStep";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotMovement(VALUE)","robotMovement(movingForward)", guardVars ).toString();
	    	emit( "robotMovement", temporaryStr );
	    	it.unibo.myBasicStepUtils.myObstacleHandler.start( myself  );
	    	//bbb
	     msgTransition( pr,myselfName,"robot_basic_movements_"+myselfName,true,
	          new StateFun[]{stateTab.get("badResultBasicStep") }, 
	          new String[]{"true","M","foundObstacle" },
	          300, "goodResultBasicStep" );//msgTransition
	    }catch(Exception e_handleBasicStep){  
	    	 println( getName() + " plan=handleBasicStep WARNING:" + e_handleBasicStep.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleBasicStep
	    
	    StateFun goodResultBasicStep = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("goodResultBasicStep",-1);
	    	String myselfName = "goodResultBasicStep";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotMovement(VALUE)","robotMovement(stopped)", guardVars ).toString();
	    	emit( "robotMovement", temporaryStr );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?notFirstTry" )) != null ){
	    	temporaryStr = "notFirstTry";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	removeRule( temporaryStr );  
	    	}
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "basicStepResult(VALUE)","basicStepResult(good)", guardVars ).toString();
	    	emit( "basicStepResult", temporaryStr );
	    	repeatPlanNoTransition(pr,myselfName,"robot_basic_movements_"+myselfName,false,true);
	    }catch(Exception e_goodResultBasicStep){  
	    	 println( getName() + " plan=goodResultBasicStep WARNING:" + e_goodResultBasicStep.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//goodResultBasicStep
	    
	    StateFun badResultBasicStep = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("badResultBasicStep",-1);
	    	String myselfName = "badResultBasicStep";  
	    	it.unibo.myBasicStepUtils.myObstacleHandler.stopObstacleAndReset( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??notFirstTry" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "basicStepResult(VALUE)","basicStepResult(bad)", guardVars ).toString();
	    	emit( "basicStepResult", temporaryStr );
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "notFirstTry";
	    	addRule( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "badResultBasicStep";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"doBasicStep","doBasicStep", guardVars ).toString();
	    	sendMsg("doBasicStep",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"robot_basic_movements_"+myselfName,false,true);
	    }catch(Exception e_badResultBasicStep){  
	    	 println( getName() + " plan=badResultBasicStep WARNING:" + e_badResultBasicStep.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//badResultBasicStep
	    
	    StateFun handleRotation = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleRotation",-1);
	    	String myselfName = "handleRotation";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("doRotation(d)");
	    	if( currentMessage != null && currentMessage.msgId().equals("doRotation") && 
	    		pengine.unify(curT, Term.createTerm("doRotation(VALUE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="robotMovement(turningRight)";
	    		/* RaiseEvent */
	    		parg = updateVars(Term.createTerm("doRotation(VALUE)"),  Term.createTerm("doRotation(d)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) emit( "robotMovement", parg );
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("doRotation(a)");
	    	if( currentMessage != null && currentMessage.msgId().equals("doRotation") && 
	    		pengine.unify(curT, Term.createTerm("doRotation(VALUE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="robotMovement(turningLeft)";
	    		/* RaiseEvent */
	    		parg = updateVars(Term.createTerm("doRotation(VALUE)"),  Term.createTerm("doRotation(a)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) emit( "robotMovement", parg );
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"robot_basic_movements_"+myselfName,true,
	          new StateFun[]{}, 
	          new String[]{},
	          800, "goodResultRotation" );//msgTransition
	    }catch(Exception e_handleRotation){  
	    	 println( getName() + " plan=handleRotation WARNING:" + e_handleRotation.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleRotation
	    
	    StateFun goodResultRotation = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("goodResultRotation",-1);
	    	String myselfName = "goodResultRotation";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "rotationResult(VALUE)","rotationResult(good)", guardVars ).toString();
	    	emit( "rotationResult", temporaryStr );
	    	repeatPlanNoTransition(pr,myselfName,"robot_basic_movements_"+myselfName,false,true);
	    }catch(Exception e_goodResultRotation){  
	    	 println( getName() + " plan=goodResultRotation WARNING:" + e_goodResultRotation.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//goodResultRotation
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
